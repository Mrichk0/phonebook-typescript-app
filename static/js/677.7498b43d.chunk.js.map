{"version":3,"file":"static/js/677.7498b43d.chunk.js","mappings":"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","sources":["components/Section/Section.tsx","components/ContactForm/ContactForm.tsx","components/ContactItem/ContactItem.tsx","components/ContactsList/ContactsList.tsx","components/Filter/Filter.tsx","store/ContactsReduсe/contactsSelectors.ts","components/PhoneBook/Phonebook.tsx","styles/form.styles.ts"],"sourcesContent":["import React, { FC, ReactNode } from \"react\";\nimport styled from \"styled-components\";\nimport Container from \"../../styles/container\";\n\ninterface ISectionProps {\n  children: React.ReactChild | ReactNode;\n  title: string;\n}\n\nconst TitleStyled = styled.h2`\n  color: black;\n  text-align: center;\n`;\n\nconst Section: FC<ISectionProps> = ({ title, children }) => {\n  return (\n    <section>\n      <Container>\n        <TitleStyled>{title}</TitleStyled>\n        {children}\n      </Container>\n    </section>\n  );\n};\n\nexport default Section;\n","import React, { useState, FC } from \"react\";\nimport { FormContainer, FormInput, FormButton } from \"../../styles/form.styles\";\n\ninterface IForm {\n  addContacts: (contact: { name: string; number: string }) => void;\n}\ninterface IState {\n  name: string;\n  number: string;\n}\n\nconst Form: FC<IForm> = ({ addContacts }) => {\n  const [state, setState] = useState<IState>({\n    name: \"\",\n    number: \"\",\n  });\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    addContacts(state);\n    setState({ name: \"\", number: \"\" });\n  };\n\n  const onHandleChange: React.ChangeEventHandler<HTMLInputElement> = ({\n    target,\n  }) => {\n    const { name, value } = target;\n    setState((prevState) => ({ ...prevState, [name]: value }));\n  };\n\n  const { name, number } = state;\n\n  return (\n    <FormContainer onSubmit={handleSubmit}>\n      <FormInput\n        onChange={onHandleChange}\n        type=\"text\"\n        value={name}\n        name=\"name\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <FormInput\n        onChange={onHandleChange}\n        value={number}\n        name=\"number\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <FormButton type=\"submit\">add</FormButton>\n    </FormContainer>\n  );\n};\n\nexport default Form;\n","import { FC } from \"react\";\nimport { IContact } from \"../../interfaces/contacts\";\n\nimport styled from \"styled-components\";\nimport { DeleteButton } from \"../ContactsList/ContactsList\";\n\nexport const ContactItemStyled = styled.li`\n  border-bottom: 1px solid #ccc;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Contact = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst ContactName = styled.p`\n  margin-right: 15px;\n`;\n\ninterface IContactItem extends IContact {\n  deleteContact: (id: string) => void;\n}\n\nconst ContactItem: FC<IContactItem> = ({ name, number, id, deleteContact }) => {\n  return (\n    <ContactItemStyled>\n      <Contact>\n        <ContactName>{name}: </ContactName>\n        <p> {number}</p>\n      </Contact>\n\n      <DeleteButton onClick={() => deleteContact(id)}>Delete</DeleteButton>\n    </ContactItemStyled>\n  );\n};\n\nexport default ContactItem;\n","import { FC } from \"react\";\n\nimport { IContact } from \"../../interfaces/contacts\";\n\nimport ContactItem from \"../ContactItem\";\n\nimport styled from \"styled-components\";\n\nexport const ContactList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\nexport const ContactDetails = styled.div`\n  flex: 1;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: ${({ theme }) => theme.colors.danger};\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n\ninterface IContactsList {\n  contacts: IContact[];\n  deleteContact: (id: string) => void;\n}\n\nconst ContactsList: FC<IContactsList> = ({ contacts, deleteContact }) => {\n  return (\n    <ContactList>\n      {contacts?.map((contact) => (\n        <ContactItem\n          key={contact.id}\n          {...contact}\n          deleteContact={deleteContact}\n        />\n      ))}\n    </ContactList>\n  );\n};\n\nexport default ContactsList;\n","import { FC, ChangeEvent } from \"react\";\nimport { FormContainer, FormInput } from \"../../styles/form.styles\";\n\ninterface IFilter {\n  filterContacts: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Filter: FC<IFilter> = ({ filterContacts }) => {\n  return (\n    <FormContainer>\n      <FormInput type=\"text\" onChange={filterContacts} />\n    </FormContainer>\n  );\n};\n\nexport default Filter;\n","import { IInitialState } from \"../../interfaces/auth\";\nimport { IContact } from \"../../interfaces/contacts\";\n\nexport const selectError = (state: IInitialState): null | string =>\n  state.contacts.error;\nexport const selectContacts = (state: IInitialState): IContact[] =>\n  state.contacts.contacts;\nexport const selectLoading = (state: IInitialState): boolean =>\n  state.contacts.loading;\n","import React, { FC, useEffect, useState } from \"react\";\nimport Section from \"../Section\";\nimport Form from \"../ContactForm/ContactForm\";\nimport ContactsList from \"../ContactsList\";\n\nimport Filter from \"../Filter\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks/storeHooks\";\n\nimport {\n  addNewContacts,\n  fetchContacts,\n  removeContact,\n} from \"../../store/ContactsReduсe/contactsOperations\";\nimport Loader from \"../shared/Loader\";\nimport styled from \"styled-components\";\nimport {\n  selectContacts,\n  selectLoading,\n} from \"../../store/ContactsReduсe/contactsSelectors\";\n\nconst Canvas = styled.div`\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n`;\n\nconst PhoneBook: FC = () => {\n  const [filter, setFilter] = useState<string>(\"\");\n  const contacts = useAppSelector(selectContacts);\n  const isLoading = useAppSelector(selectLoading);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const addContacts = (contact: { name: string; number: string }): void => {\n    const duplicate = contacts?.filter(({ name }) => name === contact.name);\n    if (duplicate.length > 0) {\n      alert(\"you have this contact in your PhoneBook\");\n      return;\n    }\n\n    dispatch(addNewContacts(contact));\n  };\n\n  const deleteContact = (id: string): void => {\n    dispatch(removeContact(id));\n  };\n\n  const filterContacts: React.ChangeEventHandler<HTMLInputElement> = ({\n    target: { value },\n  }) => setFilter(value);\n\n  const filteredContacts = contacts?.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <Canvas>\n      <Section title={\"PhoneBook\"}>\n        <Form addContacts={addContacts} />\n      </Section>\n\n      <Section title={\"Contacts\"}>\n        <Filter filterContacts={filterContacts} />\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <ContactsList\n            contacts={filteredContacts}\n            deleteContact={deleteContact}\n          />\n        )}\n      </Section>\n    </Canvas>\n  );\n};\n\nexport default PhoneBook;\n","import styled from \"styled-components\";\n\nexport const FormContainer = styled.form`\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: ${({ theme }) => theme.colors.bg};\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const FormGroup = styled.div`\n  margin-bottom: 20px;\n  width: 100%;\n`;\n\nexport const FormLabel = styled.label`\n  display: block;\n  font-weight: bold;\n`;\n\nexport const FormInput = styled.input`\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 15px;\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n  font-size: 14px;\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.secondary};\n  }\n`;\n\nexport const FormButton = styled.button`\n  padding: 10px 25px;\n  background-color: ${({ theme }) => theme.colors.primary};\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n  font-weight: bold;\n  color: black;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n"],"names":["TitleStyled","styled","h2","_templateObject","_taggedTemplateLiteral","_ref","title","children","_jsx","_jsxs","Container","addContacts","state","setState","useState","name","number","onHandleChange","_ref2","target","value","prevState","FormContainer","onSubmit","e","preventDefault","FormInput","onChange","type","required","FormButton","ContactItemStyled","li","Contact","div","_templateObject2","ContactName","p","_templateObject3","id","deleteContact","DeleteButton","onClick","ContactList","ul","button","theme","colors","danger","contacts","map","contact","ContactItem","filterContacts","selectContacts","selectLoading","loading","Canvas","PhoneBook","filter","setFilter","useAppSelector","isLoading","dispatch","useAppDispatch","useEffect","fetchContacts","filteredContacts","_ref3","toLowerCase","includes","Section","Form","length","alert","addNewContacts","Filter","Loader","ContactsList","removeContact","form","bg","FormGroup","FormLabel","label","input","_templateObject4","secondary","_templateObject5","primary"],"sourceRoot":""}